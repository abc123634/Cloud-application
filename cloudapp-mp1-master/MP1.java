import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.Map.Entry;

public class MP1 {
    Random generator;
    String userName;
    String inputFileName;
    String delimiters = " \t,;.?!-:@[](){}_*/";
    String[] stopWordsArray = {"i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours",
            "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its",
            "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that",
            "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having",
            "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while",
            "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before",
            "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again",
            "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each",
            "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than",
            "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"};

    void initialRandomGenerator(String seed) throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA");
        messageDigest.update(seed.toLowerCase().trim().getBytes());
        byte[] seedMD5 = messageDigest.digest();

        long longSeed = 0;
        for (int i = 0; i < seedMD5.length; i++) {
            longSeed += ((long) seedMD5[i] & 0xffL) << (8 * i);
        }

        this.generator = new Random(longSeed);
    }

    Integer[] getIndexes() throws NoSuchAlgorithmException {
        Integer n = 10000;
        Integer number_of_lines = 50000;
        Integer[] ret = new Integer[n];

        this.initialRandomGenerator("this.userName");
//        this.initialRandomGenerator("3922450");

        for (int i = 0; i < n; i++) {
            ret[i] = generator.nextInt(number_of_lines);
        }
        return ret;
    }

    public MP1(String userName, String inputFileName) {
        this.userName = userName;
        this.inputFileName = inputFileName;
    }

    public String[] process() throws Exception {
        String[] ret = new String[20];  //top 20 word array
        int[] max_freq = new int[20];  
        String[] lines = new String[50000]; // lines of input file
        HashMap<String, Integer> frequency_map = new HashMap<String, Integer>();
        

        //read file by lines and keep them in an array
        BufferedReader br = new BufferedReader(
          new InputStreamReader(
        		  new FileInputStream("input.txt"), "UTF8"));
        try {
        	String line = br.readLine();
        	int index_line = 0;
      
        	while (line != null) { 
        		lines[index_line] = line;
        		index_line += 1;
        		line = br.readLine();
        	}
        	
        } finally {
        	br.close();
        }
        

        //process the specific lines by using the index generated by getIndexes()
        Integer[] index_required = new Integer[10000];
        index_required = getIndexes();


        //process by lines, includes using delimiter, lowercase and stop word removal
        //after processing, store the words into a map (word-frequency), counting their frequency
        for (int i = 0; i < 10000; i++) {
        	String line = lines[index_required[i]];
//        	System.out.println(index_required[i] + " , " + line);
        	
        	line = line.toLowerCase();
//        	System.out.println(line);
        	
        	StringTokenizer st = new StringTokenizer(line, delimiters);
            while (st.hasMoreTokens()) {
            	String term = st.nextToken();
            	if (!Arrays.asList(stopWordsArray).contains(term)) {

            		if (frequency_map.containsKey(term)) {
            			int old_freq = frequency_map.get(term);
            			frequency_map.put(term, old_freq + 1);
            		} 
            		else {
            			frequency_map.put(term, 1);
            		}
            	}
            }

        }

        //find 20 words with the most frequency and store them in ret
        Set<String> set = frequency_map.keySet();
        Iterator<String> iter = set.iterator();
        
        for (int i = 0; i < max_freq.length; i++) {
        	max_freq[i] = -1;
        	ret[i] = "";
        }
        
        while (iter.hasNext()) {
        	String term = iter.next();
        	int freq = frequency_map.get(term);
        	
        	if (freq > max_freq[max_freq.length - 1]) {
        		max_freq[max_freq.length - 1] = freq;
        		ret[ret.length - 1] = term;
        	}
        	
        	for (int i = max_freq.length - 1; i > 0 && max_freq[i] >= max_freq[i - 1]; i--) {
        		//frequency equal case: sorted by alphabetic
        		if (max_freq[i - 1] == max_freq[i] && ret[i - 1].compareTo(ret[i]) < 0){
        			//do nothing
        		}
        		else{
        			int temp = max_freq[i - 1];
            		max_freq[i - 1] = max_freq[i];
            		max_freq[i] = temp;
            		
            		String tempS = ret[i - 1];
            		ret[i - 1] = ret[i];
            		ret[i] = tempS;
        		}
        	}
        	
        }
        
        //print result
//        for (int i = 0; i < 20; i++) {
//        	System.out.println(ret[i] + ": " + max_freq[i]);
//        }
        

        return ret;
    }

    public static void main(String[] args) throws Exception {
        if (args.length < 1){
            System.out.println("MP1 <User ID>");
        }
        else {
            String userName = args[0];
            String inputFileName = "./input.txt";
            MP1 mp = new MP1(userName, inputFileName);
            String[] topItems = mp.process();



             for (String item: topItems){
                 System.out.println(item);
             }
        }
    	
//    	  String userName = "0";
//    	  String inputFileName = "./input.txt";
//    	  MP1 mp = new MP1(userName, inputFileName);
//    	  String[] topItems = mp.process();
//    	  
//    	  for (String item: topItems){
//    		  System.out.println(item);
//	      }
    	
    	
    }
}
